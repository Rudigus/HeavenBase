using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using WinForms = System.Windows.Forms;

namespace HeavenBase
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        string chosenPath;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void LoadButton_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(PathTextBox.Text) || !FamiliarProperties.PathIsValid(PathTextBox.Text))
                return;
            infoGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns;
            infoGrid.ItemsSource = FamiliarProperties.LoadCollectionData(chosenPath);
        }

        private void PathTextBox_Click(object sender, RoutedEventArgs e)
        {
            WinForms.FolderBrowserDialog fbd = new WinForms.FolderBrowserDialog();
            WinForms.DialogResult result = fbd.ShowDialog();
            if (result == WinForms.DialogResult.OK)
            {
                chosenPath = fbd.SelectedPath;
                ((TextBox)sender).Text = chosenPath;
            }
        }

        private void EventSetter_OnHandlerSelected(object sender, RoutedEventArgs e)
        {
            DataGridRow dgr = FindParent<DataGridRow>(sender as DataGridCell);
            dgr.Background = new SolidColorBrush(Colors.Gold);
        }

        private void EventSetter_OnHandlerLostFocus(object sender, RoutedEventArgs e)
        {
            DataGridRow dgr = FindParent<DataGridRow>(sender as DataGridCell);
            dgr.Background = new SolidColorBrush(Colors.White);
        }

        public static T FindParent<T>(DependencyObject child) where T : DependencyObject
        {
            //get parent item
            DependencyObject parentObject = VisualTreeHelper.GetParent(child);

            //we've reached the end of the tree
            if (parentObject == null) return null;

            //check if the parent matches the type we're looking for
            T parent = parentObject as T;
            if (parent != null)
                return parent;
            else
                return FindParent<T>(parentObject);
        }

       void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var firstCol = infoGrid.Columns[0];
            firstCol.SortDirection = ListSortDirection.Ascending;
            infoGrid.Items.SortDescriptions.Add(new SortDescription(infoGrid.Columns[0].SortMemberPath, ListSortDirection.Ascending));
        }

        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            string filterText = ((TextBox)sender).Text;
            ICollectionView cv = CollectionViewSource.GetDefaultView(infoGrid.ItemsSource);

            if (!string.IsNullOrEmpty(filterText))
            {
                cv.Filter = o => {
                    /* change to get data row value */
                    Familiar p = o as Familiar;
                    return p.FamiliarID.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.MobName.ToUpper().Contains(filterText.ToUpper()) ||
                    p.CardName.ToUpper().Contains(filterText.ToUpper()) ||
                    p.Rarity.ToUpper().Contains(filterText.ToUpper()) ||
                    p.SkillName.ToUpper().Contains(filterText.ToUpper()) ||
                    p.SkillDescription.ToUpper().Contains(filterText.ToUpper()) ||
                    p.Range.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.PassiveEffect.ToUpper().Contains(filterText.ToUpper()) ||
                    p.MobID.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.CardID.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.SkillID.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.PassiveEffectID.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.Level.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.Att.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.PassiveEffectBonus.ToString().ToUpper().Contains(filterText.ToUpper()) ||
                    p.SkillCategory.ToUpper().Contains(filterText.ToUpper());
                    /* end change to get data row value */
                };
            } else
            {
                cv.Filter = null;
            }
        }
    }
}
